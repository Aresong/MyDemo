package cn.declaresystem.ssm.controller;

import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;

import javax.annotation.Resource;
import javax.imageio.ImageIO;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.apache.commons.io.FileUtils;
import org.apache.commons.io.FilenameUtils;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import com.alibaba.fastjson.JSONArray;

import cn.declaresystem.ssm.pojo.Enterprise;
import cn.declaresystem.ssm.pojo.OrganizeChart;
import cn.declaresystem.ssm.service.ChartService;

@Controller
@RequestMapping("/chartCtrl/")
public class ChartController {
	@Resource ChartService chartService;
	
	@RequestMapping(value="addChart")
	public String addChart(
			HttpSession session,@RequestParam MultipartFile chart,HttpServletRequest request,Model model){
			//springmvc文件上传
		if(!chart.isEmpty()){
			//获取原文件名
			String oldFileName = chart.getOriginalFilename();
			//获取文件后缀
			String prefix = FilenameUtils.getExtension(oldFileName);
			if(prefix.equalsIgnoreCase("gif") ||
			   prefix.equalsIgnoreCase("bmp") ||
			   prefix.equalsIgnoreCase("jpg") ||
			   prefix.equalsIgnoreCase("jpeg") ||
			   prefix.equalsIgnoreCase("png")){
				//通过ImageIO读取图片流，判断大小
				try {
					BufferedImage image = ImageIO.read(chart.getInputStream());
					int h = image.getHeight();
					int w = image.getWidth();
					if(h>700 || w>600){
						request.setAttribute("chartErr", "您上传的文件大小不符合规定，请重新上传");
						return "chart";
					}
				} catch (IOException e) {
					e.printStackTrace();
				}
			}else{
				request.setAttribute("chartErr", "您上传的文件格式不符合规定，请重新上传");
				return "chart";
			}
			Integer gr_id = ((Enterprise)session.getAttribute("enterpriseObject")).getId();
			//新生成文件名防止不同用户上传文件重名
			String file_Name = System.currentTimeMillis()+"."+prefix;
			OrganizeChart _chart = new OrganizeChart();
			_chart.setGr_id(gr_id);
			_chart.setFile_name(file_Name);
			chartService.saveChartInfo(_chart);
			model.addAttribute("chart", file_Name);
			//获取系统的当前路径 
			String destPath=request.getSession().getServletContext().getRealPath("upload/");
			File destFile=new File(destPath+File.separatorChar+file_Name);
			//把源文件拷贝到目标文件。利用文件流进行拷贝
			try {
				FileUtils.copyInputStreamToFile(chart.getInputStream(), destFile);
			} catch (IOException e1) {
				e1.printStackTrace();
			}
			return "redirect:/chartCtrl/getChart";
		}else{
			request.setAttribute("chartErr", "您上传的文件为空，请重新上传");
			return "chart";
		}	
	}
	
	@RequestMapping(value="getChart")
//	@ResponseBody
//	public String getChart(HttpSession session){
//		Integer gr_id = ((Enterprise)session.getAttribute("enterpriseObject")).getId();
//		String result = "${pageContext.request.contextPath}/upload/"+chartService.getChartName(gr_id);
//		return JSONArray.toJSONString(result);
//	}
	
	public String getChart (HttpSession session,Model model){
		Integer gr_id = ((Enterprise)session.getAttribute("enterpriseObject")).getId();
		String chartName = chartService.getChartName(gr_id);
		model.addAttribute("chartName", chartName);
		return "chart";
	}
}
